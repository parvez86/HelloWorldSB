<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.HelloWorldCRUD.example.integrationtest.controller.UserControllerTest" tests="20" skipped="0" failures="0" errors="0" timestamp="2022-07-04T16:50:24" hostname="DESKTOP-7CVTM0J" time="1.125">
  <properties/>
  <testcase name="User not de-activated" classname="com.HelloWorldCRUD.example.integrationtest.controller.UserControllerTest" time="0.087"/>
  <testcase name="Users not found by last name" classname="com.HelloWorldCRUD.example.integrationtest.controller.UserControllerTest" time="0.046"/>
  <testcase name="User not deleted" classname="com.HelloWorldCRUD.example.integrationtest.controller.UserControllerTest" time="0.027"/>
  <testcase name="Users successfully found by first name" classname="com.HelloWorldCRUD.example.integrationtest.controller.UserControllerTest" time="0.051"/>
  <testcase name="Users successfully found by last name" classname="com.HelloWorldCRUD.example.integrationtest.controller.UserControllerTest" time="0.046"/>
  <testcase name="Users are successfully found" classname="com.HelloWorldCRUD.example.integrationtest.controller.UserControllerTest" time="0.055"/>
  <testcase name="User not saved" classname="com.HelloWorldCRUD.example.integrationtest.controller.UserControllerTest" time="0.068"/>
  <testcase name="Users not found" classname="com.HelloWorldCRUD.example.integrationtest.controller.UserControllerTest" time="0.056"/>
  <testcase name="All active users are successfully found" classname="com.HelloWorldCRUD.example.integrationtest.controller.UserControllerTest" time="0.079"/>
  <testcase name="User successfully found by email" classname="com.HelloWorldCRUD.example.integrationtest.controller.UserControllerTest" time="0.056"/>
  <testcase name="User successfully updated" classname="com.HelloWorldCRUD.example.integrationtest.controller.UserControllerTest" time="0.051"/>
  <testcase name="User successfully saved" classname="com.HelloWorldCRUD.example.integrationtest.controller.UserControllerTest" time="0.044"/>
  <testcase name="User successfully de-activated" classname="com.HelloWorldCRUD.example.integrationtest.controller.UserControllerTest" time="0.058"/>
  <testcase name="User not updated" classname="com.HelloWorldCRUD.example.integrationtest.controller.UserControllerTest" time="0.021"/>
  <testcase name="Active users are not found" classname="com.HelloWorldCRUD.example.integrationtest.controller.UserControllerTest" time="0.029"/>
  <testcase name="Users successfully found by first name" classname="com.HelloWorldCRUD.example.integrationtest.controller.UserControllerTest" time="0.02"/>
  <testcase name="User successfully found" classname="com.HelloWorldCRUD.example.integrationtest.controller.UserControllerTest" time="0.071"/>
  <testcase name="User not found by email" classname="com.HelloWorldCRUD.example.integrationtest.controller.UserControllerTest" time="0.039"/>
  <testcase name="User successfully deleted" classname="com.HelloWorldCRUD.example.integrationtest.controller.UserControllerTest" time="0.089"/>
  <testcase name="User not found by email" classname="com.HelloWorldCRUD.example.integrationtest.controller.UserControllerTest" time="0.039"/>
  <system-out><![CDATA[2022-07-04 22:50:24.031  INFO 13668 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.HelloWorldCRUD.example.integrationtest.controller.UserControllerTest], using SpringBootContextLoader
2022-07-04 22:50:24.031  INFO 13668 --- [    Test worker] o.s.t.c.support.AbstractContextLoader    : Could not detect default resource locations for test class [com.HelloWorldCRUD.example.integrationtest.controller.UserControllerTest]: no resource found for suffixes {-context.xml, Context.groovy}.
2022-07-04 22:50:24.031  INFO 13668 --- [    Test worker] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.HelloWorldCRUD.example.integrationtest.controller.UserControllerTest]: UserControllerTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2022-07-04 22:50:24.031  INFO 13668 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.HelloWorldCRUD.example.HelloWorld for test class com.HelloWorldCRUD.example.integrationtest.controller.UserControllerTest
2022-07-04 22:50:24.031  INFO 13668 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.event.ApplicationEventsTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
2022-07-04 22:50:24.031  INFO 13668 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@18f1260, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@7672dd7a, org.springframework.test.context.event.ApplicationEventsTestExecutionListener@1aee0f49, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@7a80ebcd, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@365eaef, org.springframework.test.context.support.DirtiesContextTestExecutionListener@631c6ef4, org.springframework.test.context.transaction.TransactionalTestExecutionListener@9e2b199, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@7441edeb, org.springframework.test.context.event.EventPublishingTestExecutionListener@58df431e, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@5834fd3f, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@4446e1d9, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@3f13720f, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@1df60140, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener@62d4dac4, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@11efa76e]

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /users/deactivate/2
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.HelloWorldCRUD.example.controller.UserController
           Method = com.HelloWorldCRUD.example.controller.UserController#deactivateUser(long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"message":"user not deactivated.","object":null,"status":"ERROR","fieldError":null,"methodError":null,"pathError":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /users/lname
       Parameters = {lname=[P]}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.HelloWorldCRUD.example.controller.UserController
           Method = com.HelloWorldCRUD.example.controller.UserController#getUserByLastName(String)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"message":"users not found.","object":null,"status":"ERROR","fieldError":null,"methodError":null,"pathError":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /users/3
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.HelloWorldCRUD.example.controller.UserController
           Method = com.HelloWorldCRUD.example.controller.UserController#deleteUser(long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"message":"user not deleted.","object":null,"status":"ERROR","fieldError":null,"methodError":null,"pathError":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /users/fname
       Parameters = {fname=[S]}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.HelloWorldCRUD.example.controller.UserController
           Method = com.HelloWorldCRUD.example.controller.UserController#getUserByFirstName(String)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"message":"users successfully found.","object":[{"firstName":"S","lastName":"P","email":"sp86@gmail.com"}],"status":"SUCCESS","fieldError":null,"methodError":null,"pathError":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /users/lname
       Parameters = {lname=[P]}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.HelloWorldCRUD.example.controller.UserController
           Method = com.HelloWorldCRUD.example.controller.UserController#getUserByLastName(String)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"message":"users successfully found.","object":[{"firstName":"S","lastName":"P","email":"sp86@gmail.com"}],"status":"SUCCESS","fieldError":null,"methodError":null,"pathError":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /users/
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.HelloWorldCRUD.example.controller.UserController
           Method = com.HelloWorldCRUD.example.controller.UserController#getUsers()

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"message":"users successfully found.","object":[{"firstName":"H","lastName":"R","email":"hr86@gmail.com"},{"firstName":"S","lastName":"P","email":"sp86@gmail.com"}],"status":"SUCCESS","fieldError":null,"methodError":null,"pathError":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /users/
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"57"]
             Body = {"firstName":"S","lastName":"P","email":"sp86@gmail.com"}
    Session Attrs = {}

Handler:
             Type = com.HelloWorldCRUD.example.controller.UserController
           Method = com.HelloWorldCRUD.example.controller.UserController#saveUser(UserDto)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"message":"user not created.","object":null,"status":"ERROR","fieldError":null,"methodError":null,"pathError":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /users/
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.HelloWorldCRUD.example.controller.UserController
           Method = com.HelloWorldCRUD.example.controller.UserController#getUsers()

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"message":"users not found.","object":null,"status":"ERROR","fieldError":null,"methodError":null,"pathError":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /users/active/
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.HelloWorldCRUD.example.controller.UserController
           Method = com.HelloWorldCRUD.example.controller.UserController#getActiveUser()

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"message":"users successfully found.","object":[{"firstName":"S","lastName":"P","email":"sp86@gmail.com"}],"status":"SUCCESS","fieldError":null,"methodError":null,"pathError":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
sp86@gmail.com

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /users/email
       Parameters = {email=[sp86@gmail.com]}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.HelloWorldCRUD.example.controller.UserController
           Method = com.HelloWorldCRUD.example.controller.UserController#getUserByEmail(String)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"message":"user successfully found.","object":{"firstName":"S","lastName":"P","email":"sp86@gmail.com"},"status":"SUCCESS","fieldError":null,"methodError":null,"pathError":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /users/10
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"57"]
             Body = {"firstName":"H","lastName":"R","email":"hr86@gmail.com"}
    Session Attrs = {}

Handler:
             Type = com.HelloWorldCRUD.example.controller.UserController
           Method = com.HelloWorldCRUD.example.controller.UserController#updateUser(long, UserDto)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"message":"user successfully updated.","object":{"firstName":"H","lastName":"R","email":"hr86@gmail.com"},"status":"SUCCESS","fieldError":null,"methodError":null,"pathError":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /users/
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"57"]
             Body = {"firstName":"S","lastName":"P","email":"sp86@gmail.com"}
    Session Attrs = {}

Handler:
             Type = com.HelloWorldCRUD.example.controller.UserController
           Method = com.HelloWorldCRUD.example.controller.UserController#saveUser(UserDto)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"message":"user successfully created.","object":{"firstName":"S","lastName":"P","email":"sp86@gmail.com"},"status":"SUCCESS","fieldError":null,"methodError":null,"pathError":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /users/deactivate/12
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.HelloWorldCRUD.example.controller.UserController
           Method = com.HelloWorldCRUD.example.controller.UserController#deactivateUser(long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"message":"user successfully deactivated.","object":{"firstName":"S","lastName":"P","email":"sp86@gmail.com"},"status":"SUCCESS","fieldError":null,"methodError":null,"pathError":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = PUT
      Request URI = /users/1
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"57"]
             Body = {"firstName":"H","lastName":"R","email":"hr86@gmail.com"}
    Session Attrs = {}

Handler:
             Type = com.HelloWorldCRUD.example.controller.UserController
           Method = com.HelloWorldCRUD.example.controller.UserController#updateUser(long, UserDto)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"message":"user not updated.","object":null,"status":"ERROR","fieldError":null,"methodError":null,"pathError":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /users/active/
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.HelloWorldCRUD.example.controller.UserController
           Method = com.HelloWorldCRUD.example.controller.UserController#getActiveUser()

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"message":"user not found.","object":null,"status":"ERROR","fieldError":null,"methodError":null,"pathError":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /users/fname
       Parameters = {fname=[S]}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.HelloWorldCRUD.example.controller.UserController
           Method = com.HelloWorldCRUD.example.controller.UserController#getUserByFirstName(String)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"message":"users not found.","object":null,"status":"ERROR","fieldError":null,"methodError":null,"pathError":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /users/13
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.HelloWorldCRUD.example.controller.UserController
           Method = com.HelloWorldCRUD.example.controller.UserController#getUserById(long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"message":"user successfully found.","object":{"firstName":"S","lastName":"P","email":"sp86@gmail.com"},"status":"SUCCESS","fieldError":null,"methodError":null,"pathError":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
sp86@gmail.com

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /users/email
       Parameters = {email=[sp86@gmail.com]}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.HelloWorldCRUD.example.controller.UserController
           Method = com.HelloWorldCRUD.example.controller.UserController#getUserByEmail(String)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"message":"user not found.","object":null,"status":"ERROR","fieldError":null,"methodError":null,"pathError":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /users/14
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.HelloWorldCRUD.example.controller.UserController
           Method = com.HelloWorldCRUD.example.controller.UserController#deleteUser(long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"message":"user successfully deleted.","object":{"firstName":"S","lastName":"P","email":"sp86@gmail.com"},"status":"SUCCESS","fieldError":null,"methodError":null,"pathError":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /users/1
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.HelloWorldCRUD.example.controller.UserController
           Method = com.HelloWorldCRUD.example.controller.UserController#getUserById(long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"message":"user not found.","object":null,"status":"ERROR","fieldError":null,"methodError":null,"pathError":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
